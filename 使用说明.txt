1、本地可以配置远程免密服务器列表，包括IP，用户、密码
2、判断本地用户有没有生成过密钥，如果没有，则生成本地公钥，如果有，则用旧的密钥
3、使用者可以选择：单向免密，还是互信免密
        单向本地免密远程服务：把本地公钥推送到远程服务器列表里的服务器，比如（ssh-copy-id），实现本地ssh远程服务器免密
        互信免密：在单向免密的基础上，配置互信免密（把所有的公钥写入一个authorized_keys,然后分发到所有服务器对应的.ssh目录下）

第三步使用交互


=======================================================================================
运行条件：
  安装sshpass:         yum install sshpass
  基本的  /bin/sh   

交互设计：
1. 脚本调用方式，会有简单提示，直接运行就会显示
2. 单向还是双向免密使用参数$1 来控制 <unilateral|mutual|all>， $2控制后续是否非交互 <silent>，$3$4$5录入  用户,密码,IP   ( 非交互模式单次只能处理一个，交互模式可多个 )
2. 交互录入ip地址列表    ( 如果是双向或全服务器模式，额外还会提示输入本机的ip)
3. 询问IP列表中各服务器是否统一的用户和密码，  Y 则接下来进行一次录入用户名和密码。  N则循环IP列表，进行多次录入用户名和密码   
4. 提示录入用户名  （ 全服务器模式，至少要保证所有输入的username要统一 ）
5. 提示录入密码
6. 完成配置，并使用StrictHostKeyChecking=no 的方式先登录一次，让know_hosts保存信息



模式说明：
unilateral: 单向模式  （本机到目标服务器）
mutual： 双向模式   （本机到目标服务器 ，  目标服务器到本机）
all：全服务器模式  （本机以及目标服务器列表中，任意两台均可免密登录）


注意：要配置哪个用户，就用哪个用户去运行； 
           三种模式中，本机必须作为local ，想配置其他机器间的免密，请使用all模式，把本机也加入进去；
           局限于ssh可达的基本条件，其他配置场景未做考量；
           为了避免权限不对导致的免密失败。 脚本中会设置各服务器对应用户的 .ssh 目录为700 ，  authorized_keys 文件为600权限
           本机的authorized_keys ，会覆盖被配置的服务器的authorized_keys 文件 



